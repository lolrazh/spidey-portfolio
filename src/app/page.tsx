'use client';

import { useState, useEffect } from "react";
import Link from "next/link";
import Image from "next/image";
import Lightbox from "@/components/lightbox";
import { Mail, Instagram, Linkedin } from 'lucide-react';
import path from 'path';
import { motion, AnimatePresence } from 'framer-motion';

// Image basenames (without extension)
const HERO_IMAGE_BASENAME = "PSP06449";
const POLAROID_IMAGE_BASENAME = "short_hair_compcard_2"; // Added polaroid basename

// List of ALL BASE image filenames from src/assets/images
const allImageBasenames = [
  "DSC06002",
  "DSC06700",
  "DSC05908",
  "DSC05764",
  "PSP06633",
  "PSP06518",
  "PSP06485",
  "PSP06604",
  "PSP06609",
  "PSP06627",
  "PSP06657",
  "PSP06562",
  "PSP06450",
  "PSP06444",
  "PSP06449", 
  "DSC06971",
  "IMG_20240601_013652_478",
  "IMG-20250414-WA0005",
  "IMG-20250414-WA0006",
  "IMG-20250414-WA0007",
  "IMG-20250414-WA0008",
  "short_hair_compcard_2", // Added polaroid here
];

// Images to exclude from the main portfolio gallery
const excludedBasenames = [HERO_IMAGE_BASENAME, POLAROID_IMAGE_BASENAME];

// Filter out excluded images for the portfolio gallery
const portfolioImageBasenames = allImageBasenames.filter(
  name => !excludedBasenames.includes(name)
);

// Sizes generated by the optimization script
const OPTIMIZED_SIZES = [640, 750, 828, 1080, 1200, 1920];

// Helper to generate srcset string
const generateSrcSet = (basename: string, format: 'webp' | 'avif') => {
  return OPTIMIZED_SIZES.map(size => 
    `/optimized-images/${basename}-${size}w.${format} ${size}w`
  ).join(', ');
};

export default function SpideyPortfolio() {
  // Gallery Lightbox State
  const [lightboxOpen, setLightboxOpen] = useState(false);
  const [lightboxImages, setLightboxImages] = useState<string[]>([]); 
  const [lightboxIndex, setLightboxIndex] = useState(0);
  const [selectedLayoutId, setSelectedLayoutId] = useState<string | null>(null);

  // Polaroid Lightbox State
  const [polaroidLightboxOpen, setPolaroidLightboxOpen] = useState(false); // New state

  // Header State
  const [showHeader, setShowHeader] = useState(true);
  const [lastScrollY, setLastScrollY] = useState(0);

  // No longer need to fetch dimensions dynamically
  // const [imageDimensions, setImageDimensions] = useState<{ [key: string]: ImageDimensions }>({}); 

  // Effect for controlling header visibility on scroll
  useEffect(() => {
    const controlNavbar = () => {
      if (typeof window !== 'undefined') { 
        if (window.scrollY > lastScrollY && window.scrollY > 50) {
          setShowHeader(false);
        } else { 
          setShowHeader(true);
        }
        setLastScrollY(window.scrollY);
      }
    };

    if (typeof window !== 'undefined') {
      window.addEventListener('scroll', controlNavbar);
      return () => {
        window.removeEventListener('scroll', controlNavbar);
      };
    }
  }, [lastScrollY]);

  // Prepare image paths for Gallery Lightbox 
  const lightboxImagePaths = portfolioImageBasenames.map(basename => 
    `/optimized-images/${basename}-1200w.webp` 
  );

  // Gallery Lightbox Opener
  const openGalleryLightbox = (index: number, layoutId: string) => {
    setLightboxImages(lightboxImagePaths); 
    setLightboxIndex(index);
    setSelectedLayoutId(layoutId);
    setLightboxOpen(true);
  };

  const closeGalleryLightbox = () => {
    setLightboxOpen(false);
    setSelectedLayoutId(null); 
  }

  // Polaroid Lightbox Opener
  const openPolaroidLightbox = () => {
    setPolaroidLightboxOpen(true);
  };

  const closePolaroidLightbox = () => {
    setPolaroidLightboxOpen(false);
  };

  // Smooth scroll handler
  const handleSmoothScroll = (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>, targetId: string) => {
    e.preventDefault();
    const targetElement = document.getElementById(targetId);
    if (targetElement) {
      // Calculate position considering potential sticky header offset
      const headerOffset = 80; // Adjust based on your actual header height + desired gap
      const elementPosition = targetElement.getBoundingClientRect().top;
      const offsetPosition = elementPosition + window.scrollY - headerOffset;
      
      window.scrollTo({
        top: offsetPosition,
        behavior: "smooth"
      });
    }
  };

  // Define sizes prop for images (adjust based on your column layout)
  const imageSizes = "(max-width: 640px) 100vw, (max-width: 768px) 50vw, (max-width: 1024px) 33vw, 25vw";

  return (
    <main className="min-h-screen flex flex-col">
      {/* Header/Navigation (Auto-hiding) */}
      <header className={`py-4 border-b sticky top-0 bg-white z-50 transition-transform duration-300 ${showHeader ? 'translate-y-0' : '-translate-y-full'}`}>
        <div className="container mx-auto flex justify-center items-center px-4 md:px-8"> 
          <nav className="flex space-x-8">
            <a 
              href="#about" 
              className="nav-link" 
              onClick={(e) => handleSmoothScroll(e, 'about')} >
              ABOUT
            </a>
            <a 
              href="#portfolio" 
              className="nav-link" 
              onClick={(e) => handleSmoothScroll(e, 'portfolio')} >
              ALL WORK
            </a>
          </nav>
        </div>
      </header>

      {/* Main Content - Hero Section */}
      <section id="about" className="container mx-auto py-12 md:py-16 px-4 md:px-8 scroll-mt-16">
        <div className="max-w-5xl mx-auto"> 
          <div className="grid grid-cols-1 md:grid-cols-12 gap-8 md:gap-12 items-start">
            {/* Left column - Profile & Info */}
            <div className="md:col-span-6 flex flex-col">
              <h1 className="text-4xl md:text-5xl lg:text-6xl font-medium font-cormorant tracking-tight mb-4 uppercase">NITHIN/SPIDEY</h1>
  
              <p className="text-sm mb-4 mt-2">
              Hi, I'm Spidey! I'm an architect-turned-model. 
              I bring creativity, energy, and flawless style to every shoot. Want to work together? <br></br> Let's make something cool happen!
              </p>

              {/* Buttons and Socials Row */}
              <div className="flex items-center space-x-8 mt-4 mb-8">
                {/* Polaroids Button */}
                <button 
                  className="font-sans text-sm uppercase tracking-wider border border-current px-3 py-1 hover:opacity-70 transition-opacity duration-200"
                  onClick={openPolaroidLightbox} // Attach new handler
                >
                  POLAROIDS
                </button>

                {/* Social Links (Styled like Nav Links) */}
                <div className="flex space-x-6"> 
                  <Link href="mailto:spideyos@yahoo.com" className="text-current hover:opacity-70 transition-opacity duration-200"> {/* Apply hover opacity */} 
                    <Mail size={20} strokeWidth={1.0} /> 
                  </Link>
                  <Link href="https://www.instagram.com/spideyos" target="_blank" className="text-current hover:opacity-70 transition-opacity duration-200"> {/* Apply hover opacity */} 
                    <Instagram size={20} strokeWidth={1.0} /> 
                  </Link>
                  <Link href="https://www.linkedin.com/in/nithin-g-7733501a6/" target="_blank" className="text-current hover:opacity-70 transition-opacity duration-200"> {/* Apply hover opacity */} 
                    <Linkedin size={20} strokeWidth={1.0} /> 
                  </Link>
                </div>
              </div>

              {/* measurements */}
              <div className="grid grid-cols-3 -gap-y-1 text-xs">
                <div className="uppercase">HEIGHT</div>
                <div className="uppercase">CHEST</div>
                <div className="uppercase">WAIST</div>
                <div className="font-bold uppercase">6'0"/183CM</div>
                <div className="font-bold uppercase">37"/94CM</div>
                <div className="font-bold uppercase">29"/74CM</div>
                
                <div className="uppercase mt-3">HIP</div>
                <div className="uppercase mt-3">SHOE</div>
                <div className="uppercase mt-3">HAIR</div>
                <div className="font-bold uppercase">35"/89CM</div>
                <div className="font-bold uppercase">45.5</div>
                <div className="font-bold uppercase">BLACK</div>
              </div>
              <div className="grid grid-cols-1 -gap-y-1 text-xs mt-3">
                <div className="uppercase">EYE COLOR</div>
                <div className="font-bold uppercase">BROWN</div>
                
                <div className="uppercase mt-3">PRONOUNS</div>
                <div className="font-bold uppercase">HE/HIM/HIS</div>
              </div>
            </div>

            {/* Profile Image (Using <picture>) */}
            <div className="md:col-span-5 relative w-full cursor-default"> 
               <picture>
                 <source 
                   type="image/avif" 
                   srcSet={generateSrcSet(HERO_IMAGE_BASENAME, 'avif')} 
                   sizes={imageSizes} // Reuse sizes prop
                 />
                 <source 
                   type="image/webp" 
                   srcSet={generateSrcSet(HERO_IMAGE_BASENAME, 'webp')} 
                   sizes={imageSizes}
                 />
                 {/* Fallback img (can use Next Image or regular img) */}
                 <img 
                   src={`/optimized-images/${HERO_IMAGE_BASENAME}-1200w.webp`} // Fallback src
                   alt="Nithin/Spidey portrait" 
                   loading="eager" // Load hero eagerly
                   className="object-cover object-center w-full h-auto" // Ensure it scales
                   decoding="async"
                   fetchPriority="high"
                 />
               </picture>
            </div>
          </div>
        </div>
      </section>

      {/* "All Work" Section Label */}
      <div id="portfolio" className="px-4 md:px-8 py-6 scroll-mt-16">
        <h2 className="text-2xl font-sans font-bold uppercase">ALL WORK</h2>
      </div>

      {/* Image Gallery - Using <picture> */}
      <section className="w-full px-1">
        <div className="columns-1 sm:columns-2 md:columns-3 lg:columns-4 gap-2"> 
          {portfolioImageBasenames.map((basename, i) => { 
            const layoutId = `card-image-${basename}`;
            return (
              <motion.div 
                key={`portfolio-${i}-${basename}`}
                layoutId={layoutId} 
                className={`relative mb-2 cursor-pointer overflow-hidden group`} 
                style={{ breakInside: 'avoid' }}
                onClick={() => openGalleryLightbox(i, layoutId)} // Use gallery opener
              >
                <picture>
                  <source 
                    type="image/avif" 
                    srcSet={generateSrcSet(basename, 'avif')} 
                    sizes={imageSizes}
                  />
                  <source 
                    type="image/webp" 
                    srcSet={generateSrcSet(basename, 'webp')} 
                    sizes={imageSizes}
                  />
                  {/* Fallback img */}
                  <img 
                    src={`/optimized-images/${basename}-828w.webp`} 
                    alt={`Portfolio image ${i + 1}`} 
                    loading="lazy"
                    decoding="async"
                    className="object-cover w-full h-auto block" 
                  />
                </picture>
              </motion.div>
            ); 
          })}
        </div>
      </section>

      {/* Footer - Thinner */}
      <footer className="mt-24 bg-white py-4 border-t">
        <div className="container mx-auto px-4 md:px-8">
          <div className="max-w-xl mx-auto">
            <div className="flex flex-wrap justify-center gap-6">
              {/* Social Icons Filtered (Styled like Nav Links) */}
              <Link href="mailto:spideyos@yahoo.com" className="text-current hover:opacity-70 transition-opacity duration-200"> {/* Apply hover opacity */} 
                 <Mail size={20} strokeWidth={1.0}/> 
              </Link>
              <Link href="https://www.instagram.com/spideyos" target="_blank" className="text-current hover:opacity-70 transition-opacity duration-200"> {/* Apply hover opacity */} 
                <Instagram size={20} strokeWidth={1.0}/> 
              </Link>
              <Link href="https://www.linkedin.com/in/nithin-g-7733501a6/" target="_blank" className="text-current hover:opacity-70 transition-opacity duration-200"> {/* Apply hover opacity */} 
                <Linkedin size={20} strokeWidth={1.0}/> 
              </Link>
            </div>
          </div>
        </div>
      </footer>

      {/* Gallery Lightbox */}
      <AnimatePresence>
        {lightboxOpen && (
          <Lightbox
            key="gallery-lightbox"
            isOpen={lightboxOpen}
            onClose={closeGalleryLightbox}
            images={lightboxImagePaths} 
            currentIndex={lightboxIndex}
          />
        )}
      </AnimatePresence>

      {/* Polaroid Lightbox */}
      <AnimatePresence>
        {polaroidLightboxOpen && (
          <Lightbox
            key="polaroid-lightbox"
            isOpen={polaroidLightboxOpen}
            onClose={closePolaroidLightbox}
            images={[`/optimized-images/${POLAROID_IMAGE_BASENAME}-1200w.webp`]} 
            currentIndex={0} 
          />
        )}
      </AnimatePresence>
    </main>
  );
}
